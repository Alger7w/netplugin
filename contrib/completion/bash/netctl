#! /bin/bash

GLOBAL_COMMANDS="\
    group\
    network\
    tenant\
    rule\
    policy\
    help"

GLOBAL_OPTIONS="\
    --netmaster\
    --help\
    --version"

# Fetch all tenant names
_netctl_complete_tenants() {
    fields='$1'
    COMPREPLY=( $(compgen -W '$(netctl tenant ls | awk "NR>2 {print $fields}")' -- "$cur") )
}

# Fetch all network names in the tenant
_netctl_complete_networks() {
   local tenant
   tenant=$(_netctl_fetch_tenant_value)
   fields='$2'
    COMPREPLY=( $(compgen -W '$(netctl network ls --tenant $tenant | awk "NR>2 {print $fields}")' -- "$cur") )
}

# Fetch all policy names in the tenant
_netctl_complete_policies() {
    local tenant
    tenant=$(_netctl_fetch_tenant_value)
    fields='$2'
    COMPREPLY=( $(compgen -W '$(netctl policy ls --tenant $tenant | awk "NR>2 {print $fields}")' -- "$cur") )
}

# Fetch all group names in the tenant
_netctl_complete_groups() {
    local tenant
    tenant=$(_netctl_fetch_tenant_value)
    fields='$2'
    COMPREPLY=( $(compgen -W '$(netctl group ls --tenant $tenant | awk "NR>2 {print $fields}")' -- "$cur") )
}


_netctl() {
    local cur prev firstword secondword complete_words complete_options

    cur=${COMP_WORDS[COMP_CWORD]}
    prev=${COMP_WORDS[COMP_CWORD-1]}
    firstword=$(_netctl_get_firstword)
    secondword=$(_netctl_get_secondword)

    #echo -e "\nprev = $prev, cur = $cur, firstword = $firstword, secondword = $secondword \n"
    case "${firstword}" in
        group)
            case "${secondword}" in
                create)
                    _netctl_group_create
                    ;;
                rm|delete)
                    _netctl_group_rm
                    ;;
                ls|list)
                    _netctl_group_ls
                    ;;
                *)
                    COMPREPLY=( $( compgen -W "create rm ls help" -- "$cur" ) )
                    ;;
            esac
            ;;
        network|net)
            case "${secondword}" in
                create)
                    _netctl_network_create
                    ;;
                rm|delete)
                    _netctl_network_rm
                    ;;
                ls|list)
                    _netctl_network_ls
                    ;;
                *)
                    COMPREPLY=( $( compgen -W "create rm ls help" -- "$cur" ) )
                    ;;
            esac
            ;;
        tenant)
            case "${secondword}" in
                create)
                    _netctl_tenant_create
                    ;;
                rm|delete)
                    _netctl_tenant_rm
                    ;;
                ls|list)
                    ;;
                *)
                    COMPREPLY=( $( compgen -W "create rm ls help" -- "$cur" ) )
                    ;;
            esac
            ;;
        rule)
            case "${secondword}" in
                add)
                    _netctl_rule_create
                    ;;
                rm|delete)
                    _netctl_rule_rm
                    ;;
                ls|list)
                    _netctl_rule_ls
                    ;;
                *)
                    COMPREPLY=( $( compgen -W "add rm ls help" -- "$cur" ) )
                    ;;
            esac
            ;;
        policy)
            case "${secondword}" in
                create)
                    _netctl_policy_create
                    ;;
                rm|delete)
                    _netctl_policy_rm
                    ;;
                ls|list)
                    _netctl_policy_ls
                    ;;
                *)
                    COMPREPLY=( $( compgen -W "create rm ls help" -- "$cur" ) )
                    ;;
            esac
            ;;
        *)
            if [[ $cur == -* ]]; then
                COMPREPLY=( $( compgen -W "$GLOBAL_OPTIONS" -- "$cur" ) )
            else
                COMPREPLY=( $( compgen -W "$GLOBAL_COMMANDS" -- "$cur" ) )
            fi
            ;;
    esac
}

# Get the first word that is not an option flag.
# Usually the command
_netctl_get_firstword() {
    local firstword i

    firstword=
    for ((i = 1; i < ${#COMP_WORDS[@]}; ++i)); do
        if [[ ${COMP_WORDS[i]} != -* ]]; then
            firstword=${COMP_WORDS[i]}
            break
        fi
    done

    echo $firstword
}

# Get the second word that is not an option flag.
# Usually the sub-command
_netctl_get_secondword() {
    local secondword i

    secondword=
    for ((i = 2; i < ${#COMP_WORDS[@]}; ++i)); do
        if [[ ${COMP_WORDS[i]} != -* ]]; then
            secondword=${COMP_WORDS[i]}
            break
        fi
    done

    echo $secondword
}

_netctl_network_create() {
    case "$prev" in
        --encap|-e)
            COMPREPLY=( $( compgen -W "vlan vxlan" -- "$cur" ) )
            return
            ;;
        --tenant|-t)
            _netctl_complete_tenants
            return
            ;;
    esac

    case "$cur" in
        *)
            _netctl_fetch_options
            return
            ;;
    esac
}

_netctl_network_rm() {
    case "$prev" in
        --tenant|-t)
            _netctl_complete_tenants
            return 
            ;;
   esac

    case "$cur" in
        -*)
            _netctl_fetch_options
            ;;
        *)
            _netctl_complete_networks
            ;;
    esac
}

_netctl_network_ls() {
    case "$prev" in
        --tenant|-t)
            _netctl_complete_tenants
            return 
            ;;
   esac

    case "$cur" in
        *)
            _netctl_fetch_options
            ;;
    esac
}

_netctl_tenant_create() {
    case "$cur" in
        *)
            _netctl_fetch_options
            return
            ;;
    esac
}

_netctl_tenant_rm() {
    case "$cur" in
        *)
            _netctl_complete_tenants
            ;;
    esac
}

_netctl_policy_create() {
    case "$prev" in
        --tenant|-t)
            _netctl_complete_tenants
            return
            ;;
    esac

    case "$cur" in
        *)
            _netctl_fetch_options
            return
            ;;
    esac
}

_netctl_policy_rm() {
    case "$prev" in
        --tenant|-t)
            _netctl_complete_tenants
            return 
            ;;
   esac

    case "$cur" in
        -*)
            _netctl_fetch_options
            ;;
        *)
            _netctl_complete_policies
            ;;
    esac
}

_netctl_policy_ls() {
    case "$prev" in
        --tenant|-t)
            _netctl_complete_tenants
            return 
            ;;
   esac

    case "$cur" in
        *)
            _netctl_fetch_options
            ;;
    esac
}

_netctl_group_create() {
    case "$prev" in
        --tenant|-t)
            _netctl_complete_tenants
            return
            ;;
    esac

    case "$cur" in
        *)
            _netctl_fetch_options
            return
            ;;
    esac
}

_netctl_group_rm() {
    case "$prev" in
        --tenant|-t)
            _netctl_complete_tenants
            return 
            ;;
   esac

    case "$cur" in
        -*)
            _netctl_fetch_options
            ;;
        *)
            _netctl_complete_groups
            ;;
    esac
}

_netctl_group_ls() {
    case "$prev" in
        --tenant|-t)
            _netctl_complete_tenants
            return 
            ;;
   esac

    case "$cur" in
        *)
            _netctl_fetch_options
            ;;
    esac
}

_netctl_rule_create() {
    case "$prev" in
        --tenant|-t)
            _netctl_complete_tenants
            return
            ;;
        --direction|-d)
            COMPREPLY=( $( compgen -W "in out both" -- "$cur" ) )
            return
            ;;
        --group|-g)
            _netctl_complete_groups
            return
            ;;
        --network|-n)
            _netctl_complete_networks
            return
            ;;
        --action|-a)
            COMPREPLY=( $( compgen -W "accept deny" -- "$cur" ) )
            return
            ;;
    esac

    case "$cur" in
        *)
            _netctl_fetch_options
            return
            ;;
    esac
}

_netctl_rule_rm() {
    case "$prev" in
        --tenant|-t)
            _netctl_complete_tenants
            return 
            ;;
    esac

    case "$cur" in
        -*)
            _netctl_fetch_options
            ;;
    esac
}

_netctl_rule_ls() {
    case "$prev" in
        --tenant|-t)
            _netctl_complete_tenants
            return 
            ;;
    esac

    case "$cur" in
        -*)
            _netctl_fetch_options
            ;;
    esac
}


# Parses the help output of cli to tokenize all strings
# Then filter out the ones that start with "-" or "--"
_netctl_fetch_options() {
    local cmdhelp word words
    cmdhelp=`netctl ${firstword} ${secondword} --help`
    IFS=" " read -ra parts <<< ${cmdhelp}
    for i in $(seq 0 ${#parts[@]})
    do
        # Flags start with a - or --
        grep "^-" <<< ${parts[i]} >> /dev/null
        if [ $? -eq 0 ] && [ ${parts[i]} != "-" ]
        then
            # Remove any commas
            word=${parts[i]//,/}
            words="$words $word"
        fi
    done

    COMPREPLY=( $( compgen -W "$words" -- "$cur" ) )
}


_netctl_fetch_tenant_value() {
    local tenant
    tenant=$(_netctl_option_val_get '--tenant')
    if [ -z $tenant ]; then
        tenant=$(_netctl_option_val_get '-t')

        if [ -z $tenant ]
        then
            tenant="default"
        fi
    fi
    echo $tenant
}

# Parses the entire command for the option that is requested 
# and returns the next pattern as value
_netctl_option_val_get() {
    local option_prop option_val i

    option_prop="$1"

    option_val=
    for ((i = 1; i < ${#COMP_WORDS[@]}; ++i)); do
        if [[ ${COMP_WORDS[i]} == "$option_prop" ]] && [[ -n ${COMP_WORDS[i+1]} ]]; then
            option_val=${COMP_WORDS[i+1]}
        fi
    done

    echo $option_val
}


complete -F _netctl netctl
